/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyectprogra2;


import clases.pacientes;
import clases.pacientes2;
import clases.postgreeconexion;
import java.awt.Color;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anaca
 */
public class paciente extends javax.swing.JFrame {

    /**
     * Creates new form paciente
     */
    DefaultTableModel model;
    
   
     List<pacientes> listapacientes;
    pacientes paciente = new pacientes();
    List<pacientes2> listapacientes1;
    pacientes2 paciente1 = new pacientes2();
    
    public paciente() {
        initComponents();
        listapacientes = new ArrayList<>();
        
        listapacientes1 = new ArrayList<>();
       
     
        InitStyles1();
        SetDate1();
        
        
          postgreeconexion conexion = new postgreeconexion();
            Connection CONEXION = conexion.connectarPostgree();
            
            model = new DefaultTableModel();
            model.addColumn("No. paciente");
            model.addColumn("Pacientes");
            model.addColumn("Observacion");
            model.addColumn("Hora ingreso");
            model.addColumn("Hora egreso");
            this.Pacienteslist.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Pacienteslist = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        buscar1 = new javax.swing.JTextField();
        menus = new javax.swing.JPanel();
        mens2 = new javax.swing.JLabel();
        barra = new javax.swing.JPanel();
        inicio1 = new javax.swing.JButton();
        Agregarpaciente = new javax.swing.JButton();
        buscarpacientes1 = new javax.swing.JButton();
        verpacientes = new javax.swing.JButton();
        cabeza = new javax.swing.JPanel();
        mens1 = new javax.swing.JLabel();
        hora1 = new javax.swing.JLabel();
        mens = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(127, 181, 181));

        fondo2.setBackground(new java.awt.Color(127, 181, 181));

        Pacienteslist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No. paciente", "Pacientes", "Observaci√≥n", "Hora de ingreso", "Hora de egreso"
            }
        ));
        jScrollPane2.setViewportView(Pacienteslist);

        jLabel1.setFont(new java.awt.Font("NSimSun", 1, 18)); // NOI18N
        jLabel1.setText("Buscar paciente por Correlativo, DPI o Nombre ");

        buscar1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                buscar1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout fondo2Layout = new javax.swing.GroupLayout(fondo2);
        fondo2.setLayout(fondo2Layout);
        fondo2Layout.setHorizontalGroup(
            fondo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(fondo2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buscar1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        fondo2Layout.setVerticalGroup(
            fondo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondo2Layout.createSequentialGroup()
                .addGroup(fondo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(buscar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))
        );

        menus.setBackground(new java.awt.Color(127, 181, 181));
        menus.setForeground(new java.awt.Color(51, 51, 255));
        menus.setPreferredSize(new java.awt.Dimension(270, 640));

        mens2.setBackground(new java.awt.Color(127, 181, 181));
        mens2.setFont(new java.awt.Font("NSimSun", 1, 18)); // NOI18N
        mens2.setText("HOSPITAL DE DIOS");

        barra.setBackground(new java.awt.Color(255, 255, 255));
        barra.setPreferredSize(new java.awt.Dimension(160, 2));

        javax.swing.GroupLayout barraLayout = new javax.swing.GroupLayout(barra);
        barra.setLayout(barraLayout);
        barraLayout.setHorizontalGroup(
            barraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );
        barraLayout.setVerticalGroup(
            barraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        inicio1.setBackground(new java.awt.Color(127, 181, 181));
        inicio1.setFont(new java.awt.Font("NSimSun", 1, 18)); // NOI18N
        inicio1.setForeground(new java.awt.Color(255, 255, 255));
        inicio1.setText("INICIO");
        inicio1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inicio1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        inicio1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        inicio1.setIconTextGap(10);
        inicio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicio1ActionPerformed(evt);
            }
        });

        Agregarpaciente.setBackground(new java.awt.Color(127, 181, 181));
        Agregarpaciente.setFont(new java.awt.Font("NSimSun", 1, 18)); // NOI18N
        Agregarpaciente.setForeground(new java.awt.Color(255, 255, 255));
        Agregarpaciente.setText("AGREGAR PACIENTE");
        Agregarpaciente.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Agregarpaciente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Agregarpaciente.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Agregarpaciente.setMaximumSize(new java.awt.Dimension(42, 20));
        Agregarpaciente.setMinimumSize(new java.awt.Dimension(42, 20));
        Agregarpaciente.setPreferredSize(new java.awt.Dimension(42, 20));
        Agregarpaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarpacienteActionPerformed(evt);
            }
        });

        buscarpacientes1.setBackground(new java.awt.Color(127, 181, 181));
        buscarpacientes1.setFont(new java.awt.Font("NSimSun", 1, 18)); // NOI18N
        buscarpacientes1.setForeground(new java.awt.Color(255, 255, 255));
        buscarpacientes1.setText("BUSCAR PACIENTE");
        buscarpacientes1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buscarpacientes1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        buscarpacientes1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        buscarpacientes1.setMaximumSize(new java.awt.Dimension(42, 20));
        buscarpacientes1.setMinimumSize(new java.awt.Dimension(42, 20));
        buscarpacientes1.setPreferredSize(new java.awt.Dimension(42, 20));
        buscarpacientes1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarpacientes1ActionPerformed(evt);
            }
        });

        verpacientes.setBackground(new java.awt.Color(127, 181, 181));
        verpacientes.setFont(new java.awt.Font("NSimSun", 1, 18)); // NOI18N
        verpacientes.setForeground(new java.awt.Color(255, 255, 255));
        verpacientes.setText("VER PACIENTES");
        verpacientes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        verpacientes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        verpacientes.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        verpacientes.setMaximumSize(new java.awt.Dimension(42, 20));
        verpacientes.setMinimumSize(new java.awt.Dimension(42, 20));
        verpacientes.setPreferredSize(new java.awt.Dimension(42, 20));
        verpacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verpacientesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menusLayout = new javax.swing.GroupLayout(menus);
        menus.setLayout(menusLayout);
        menusLayout.setHorizontalGroup(
            menusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menusLayout.createSequentialGroup()
                .addGroup(menusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menusLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(barra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(verpacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Agregarpaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inicio1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(menusLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(mens2))
                    .addComponent(buscarpacientes1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
        menusLayout.setVerticalGroup(
            menusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menusLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(mens2)
                .addGap(6, 6, 6)
                .addComponent(barra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inicio1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(Agregarpaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(buscarpacientes1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(verpacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108))
        );

        cabeza.setBackground(new java.awt.Color(127, 181, 181));
        cabeza.setPreferredSize(new java.awt.Dimension(750, 150));

        mens1.setFont(new java.awt.Font("NSimSun", 1, 18)); // NOI18N
        mens1.setText("LISTADO DE PACIENTES / EDITAR / ELIMINAR / BUSCAR");

        hora1.setFont(new java.awt.Font("NSimSun", 1, 36)); // NOI18N
        hora1.setText("FECHA: {dayname}  {day} de {month} de {year}");

        javax.swing.GroupLayout cabezaLayout = new javax.swing.GroupLayout(cabeza);
        cabeza.setLayout(cabezaLayout);
        cabezaLayout.setHorizontalGroup(
            cabezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cabezaLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(cabezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cabezaLayout.createSequentialGroup()
                        .addComponent(mens1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(hora1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        cabezaLayout.setVerticalGroup(
            cabezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cabezaLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(mens1)
                .addGap(18, 18, 18)
                .addComponent(hora1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        mens.setBackground(new java.awt.Color(127, 181, 181));
        mens.setFont(new java.awt.Font("NSimSun", 1, 24)); // NOI18N
        mens.setText("AFILIADOS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fondo2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(mens, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(cabeza, javax.swing.GroupLayout.DEFAULT_SIZE, 896, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menus, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mens, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cabeza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fondo2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     private void SetDate1(){
        
        LocalDate now = LocalDate.now();
        Locale spanishLocale = new Locale("es", "ES");
        hora1.setText(now.format(DateTimeFormatter.ofPattern("'Hoy es' EEEE dd 'De' MMMM 'De' yyyy", spanishLocale)));
        
    }
    
    
      private void InitStyles1(){
        
        mens.putClientProperty( "FlatLaf.style", "font: 200% $light.font" );
        mens.setForeground(Color.black);
        mens1.putClientProperty( "FlatLaf.style", "font: 15 $light.font" );
        mens1.setForeground(Color.black);
        mens2.putClientProperty( "FlatLaf.style", "font: 25 $light.font" );
        mens2.setForeground(Color.white);
        hora1.putClientProperty( "FlatLaf.style", "font: 200% $light.font" );
        hora1.setForeground(Color.black);
        
    }
    private void inicio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicio1ActionPerformed
        Menu menu = new Menu();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_inicio1ActionPerformed

    private void AgregarpacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarpacienteActionPerformed

        agregarpaciente paci = new agregarpaciente();
        paci.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_AgregarpacienteActionPerformed

    public void mostrarpaciente(String Buscar2){
        // sirve para el boton de buscar pacientes
        try {
             paciente1 = new pacientes2();
            postgreeconexion conexion = new postgreeconexion();
            Connection CONEXION = conexion.connectarPostgree();
                
              Statement statement;

            statement = CONEXION.createStatement(); 
            
            String SQL = "SELECT * FROM public.registro WHERE no_paciente LIKE '%"+Buscar2+"%' OR nombres ILIKE '%"+Buscar2+"%' OR dpi ILIKE '%"+Buscar2+"%'; ";
            
           ResultSet rs = statement.executeQuery(SQL);
           
           if(rs.next()){
             
               paciente1.setNopaciente1(rs.getString("no_paciente"));
              paciente1.setPrimerapellido1(rs.getString("primer_apellido"));
              paciente1.setSegundoapellido1(rs.getString("segundo_apellido"));
              paciente1.setNombres1(rs.getString("nombres"));
              paciente1.setDpi1(rs.getString("dpi"));
              Date fecha = rs.getDate("fecha_nacimiento");
              paciente1.setDia1(String.valueOf(fecha.toLocalDate().getDayOfMonth()));
              paciente1.setMes1(String.valueOf(fecha.toLocalDate().getMonthValue()));
              paciente1.setAnio1(String.valueOf(fecha.toLocalDate().getYear()));
              paciente1.setEdad1(rs.getInt("edad"));
              paciente1.setLugarnacimiento1(rs.getString("lugar_nacimiento"));
              paciente1.setTiposangre1(rs.getString("tipo_sangre"));
              paciente1.setEtnia1(rs.getString("etnia"));
              paciente1.setSexo1(rs.getString("sexo"));
              paciente1.setNivelescolar1(rs.getString("nivel_escolar"));
              paciente1.setOcupacion1(rs.getString("ocupacion"));
              paciente1.setDepartamento1(rs.getString("departamento"));
              paciente1.setMunicipio1(rs.getString("municipio"));
              paciente1.setDireccion1(rs.getString("direccion"));
              paciente1.setTelefono1(rs.getString("telefono"));
              paciente1.setEmail1(rs.getString("email"));
              paciente1.setObservacion1(rs.getString("observacion"));
              paciente1.setHoraingreso1(rs.getString("hora_ingreso"));
              paciente1.setIdioma1(rs.getString("idioma"));
              paciente1.setAlergias1(rs.getString("alergias"));
              paciente1.setHoraegreso1(rs.getString("hora_egreso"));
           }else{
              paciente1.setNopaciente1(rs.getString(" "));
              paciente1.setPrimerapellido1(rs.getString(" "));
              paciente1.setSegundoapellido1(rs.getString(" "));
              paciente1.setNombres1(rs.getString(" "));
              paciente1.setDpi1(rs.getString(" "));
              paciente1.setFechanacimiento1(rs.getString(" "));
              paciente1.setEdad1(rs.getInt(" "));
              paciente1.setLugarnacimiento1(rs.getString(" "));
              paciente1.setTiposangre1(rs.getString(" "));
              paciente1.setEtnia1(rs.getString(" "));
              paciente1.setSexo1(rs.getString(" "));
              paciente1.setNivelescolar1(rs.getString(" "));
              paciente1.setOcupacion1(rs.getString(" "));
              paciente1.setDepartamento1(rs.getString(" "));
              paciente1.setMunicipio1(rs.getString(" "));
              paciente1.setDireccion1(rs.getString(" "));
              paciente1.setTelefono1(rs.getString(" "));
              paciente1.setEmail1(rs.getString(" "));
              paciente1.setObservacion1(rs.getString(" "));
              paciente1.setHoraingreso1(rs.getString(" "));
              paciente1.setIdioma1(rs.getString(" "));
              paciente1.setAlergias1(rs.getString(" "));
              paciente1.setHoraegreso1(rs.getString(" "));
               JOptionPane.showMessageDialog(null,"no se encontro registro", "Sin registro", JOptionPane.INFORMATION_MESSAGE);
           }     
                CONEXION.close();//SIEMPRE SE CIERRA LA CONEXION
            CONEXION = null; // SE COLOCA A NULL LA CONEXION PARA QUE EL GC TOME ESTE OBJETO Y LO ELIMINE DE MEMORIA
            conexion = null;
            
         } catch (Exception e) {
             JOptionPane.showMessageDialog(null,"error al buscar el paciente", "Sin Busqueda", JOptionPane.ERROR_MESSAGE);
         }
    }
     
    private void buscarpacientes1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarpacientes1ActionPerformed
        // busca los pacientes y muestra toda la informacion
     
        mostrarpaciente(buscar1.getText());
        
        Buscarpaciente Buscar;
        try {
            
            Buscar = new Buscarpaciente();
            Buscar.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.dispose();
        
        
    }//GEN-LAST:event_buscarpacientes1ActionPerformed

    private void verpacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verpacientesActionPerformed
        // TODO add your handling code here:
         
        listapacientes.clear();
          postgreeconexion conexion = new postgreeconexion();
            Connection CONEXION = conexion.connectarPostgree();
            
            try {
                
                String SQL = "SELECT no_paciente, nombres, observacion, hora_ingreso, hora_egreso\n" +
                        "FROM public.registro";
                
                Statement statement;

            statement = CONEXION.createStatement(); // creamos sentencia
            ResultSet rs = statement.executeQuery(SQL); // ejecuta consulta
            
            while(rs.next()){
                pacientes datos = new pacientes();
                datos.setNopaciente(rs.getString("no_paciente"));
                datos.setNombres(rs.getString("nombres"));
                datos.setObservacion(rs.getString("observacion"));
                datos.setHoraingreso(rs.getString("hora_ingreso"));
                datos.setHoraegreso(rs.getString("hora_egreso"));
                listapacientes.add(datos);
            }
            
            CONEXION.close();//SIEMPRE SE CIERRA LA CONEXION
            CONEXION = null; // SE COLOCA A NULL LA CONEXION PARA QUE EL GC TOME ESTE OBJETO Y LO ELIMINE DE MEMORIA
            conexion = null;
           
        } catch (SQLException ex) {
              Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            int numeroFila = 5;
            if(listapacientes.size() > 5){
                numeroFila = listapacientes.size();
            }
            String[][] matriz = new String[numeroFila][5];
            
            for (int i = 0; i < listapacientes.size(); i++ ){
                matriz[i][0] = listapacientes.get(i).getNopaciente();
                matriz[i][1] = listapacientes.get(i).getNombres();
                matriz[i][2] = listapacientes.get(i).getObservacion();
                matriz[i][3] = listapacientes.get(i).getHoraingreso();
                matriz[i][4] = listapacientes.get(i).getHoraegreso();
            }
              Pacienteslist.setModel(new javax.swing.table.DefaultTableModel(
                matriz,
                new String[]{
                    "No. paciente", "Nombres", "Observacion", "Hora_ingreso", "Hora_egreso"
                }
        ));
              
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        for (int x = 0; x < 6; x++) {
            Pacienteslist.getColumnModel().getColumn(x).setCellRenderer(centerRenderer);
        }
       
            
    }//GEN-LAST:event_verpacientesActionPerformed
  
    private void BuscarPacientes(String Buscar){
            listapacientes.clear();
           postgreeconexion conexion = new postgreeconexion();
            Connection CONEXION = conexion.connectarPostgree();
            
            try {
                
                String SQL = "SELECT no_paciente, nombres, observacion, hora_ingreso, hora_egreso\n" +
                        "FROM public.registro WHERE no_paciente LIKE '%"+Buscar+"%' OR nombres ILIKE '%"+Buscar+"%' OR dpi ILIKE '%"+Buscar+"%'";
                
                Statement statement;

            statement = CONEXION.createStatement(); // creamos sentencia
            ResultSet rs = statement.executeQuery(SQL); // ejecuta consulta
            
            while(rs.next()){
                pacientes datos = new pacientes();
                datos.setNopaciente(rs.getString("no_paciente"));
                datos.setNombres(rs.getString("nombres"));
                datos.setObservacion(rs.getString("observacion"));
                datos.setHoraingreso(rs.getString("hora_ingreso"));
                datos.setHoraegreso(rs.getString("hora_egreso"));
                listapacientes.add(datos);
            }
            
            CONEXION.close();//SIEMPRE SE CIERRA LA CONEXION
            CONEXION = null; // SE COLOCA A NULL LA CONEXION PARA QUE EL GC TOME ESTE OBJETO Y LO ELIMINE DE MEMORIA
            conexion = null;
           
        } catch (SQLException ex) {
              Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            int numeroFila = 4;
            if(listapacientes.size() > 5){
                numeroFila = listapacientes.size();
            }
            String[][] matriz = new String[numeroFila][5];
            
            for (int i = 0; i < listapacientes.size(); i++ ){
                matriz[i][0] = listapacientes.get(i).getNopaciente();
                matriz[i][1] = listapacientes.get(i).getNombres();
                matriz[i][2] = listapacientes.get(i).getObservacion();
                matriz[i][3] = listapacientes.get(i).getHoraingreso();
                 matriz[i][4] = listapacientes.get(i).getHoraegreso();
            }
              Pacienteslist.setModel(new javax.swing.table.DefaultTableModel(
                matriz,
                new String[]{
                    "No. paciente", "Nombres", "Observacion", "Hora_ingreso", "Hora_egreso"
                }
        ));
              
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        for (int x = 0; x < 6; x++) {
            Pacienteslist.getColumnModel().getColumn(x).setCellRenderer(centerRenderer);
        }
        
    }
    
   
    
    
    
    private void buscar1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscar1KeyReleased
        // TODO add your handling code here:
        
       BuscarPacientes(buscar1.getText());
      
    }//GEN-LAST:event_buscar1KeyReleased
 
  private void lanzarMensaje(String pMensaje) {
        JOptionPane.showMessageDialog(null, pMensaje);
    }
   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new paciente().setVisible(true);
            }
        });
    }
    
   

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Agregarpaciente;
    private javax.swing.JTable Pacienteslist;
    private javax.swing.JPanel barra;
    private javax.swing.JTextField buscar1;
    private javax.swing.JButton buscarpacientes1;
    private javax.swing.JPanel cabeza;
    private javax.swing.JPanel fondo2;
    private javax.swing.JLabel hora1;
    private javax.swing.JButton inicio1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel mens;
    private javax.swing.JLabel mens1;
    private javax.swing.JLabel mens2;
    private javax.swing.JPanel menus;
    private javax.swing.JButton verpacientes;
    // End of variables declaration//GEN-END:variables

   
}
